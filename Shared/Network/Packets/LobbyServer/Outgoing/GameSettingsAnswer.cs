using System.IO;
using Shared.Util;

namespace Shared.Network.LobbyServer
{
    /// <summary>
    /// sub_53 A610
    /// Byte Size: 106
    /// </summary>
    public class GameSettingsAnswer : OutPacket
    {
        /*
		 * byte 91 is level cap in short
		*/
        public static byte[] GameSettings;

        public GameSettingsAnswer()
        {
            GameSettings = new byte[]
            {
                0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
                0x06, 0x00, 0x2F, 0x37, 0x05, 0x00, 0x00, 0x00, 0x0F, 0x00, 0xE4, 0xAF, 0x77, 0x00, 0xE8, 0x0F,
                0x8B, 0x14, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xF3, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x28,
                0x20, 0x1C, 0x08, 0x87, 0x01, 0x01, 0x58, 0x02, 0x00, 0x00, 0xFD, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0xFF, 0x7B, 0x27, 0xE3, 0xCD, 0xF0, 0x8C, 0x02, 0x0A, 0x5A, 0xAA, 0xD5, 0x29, 0x00,
                0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x05, 0xE0, 0x51, 0x00, 0x41, 0x60, 0xC8, 0x00, 0x00, 0x08,
                0x28, 0x02, 0x88, 0x12, 0x83, 0x00, 0x64, 0x80, 0x5A, 0xCB, 0x01, 0x07, 0x30, 0x08, 0x00, 0x00,
                0x00, 0x00
                /*0x00, 0x00, 0x00, 0x00, // ServerVer?
                0x01, 0x00, 0x06, 0x00, // Reserved?
                // Setting start?
                0x2F, 0x37, 0x05, 0x00,
                0x00, 0x00, 0x0F, 0x00,
                0xE4, 0xAF, 0x77, 0x00,
                0xE8, 0x0F, 0x8B, 0x14,
                0x00, 0x00, 0x00, 0x00, // Struct end
                0xFF, 0xF3, 0x60, 0x00,
                0x00, 0x00, 0x00, 0x00, // Struct end
                0x7F, 0x29, 0x20, 0x1C,
                0x08, 0x87, 0x01, 0x01,
                0x58, 0x02, 0x00, 0x00,
                0xFD, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, // Struct end
                0xFF, 0x7B, 0x27, 0xE3, // Main settings?
                0xCD, 0xF0, 0x8C, 0x02,
                0x0A, 0x5A, 0xAA, 0xD5,
                0x29, 0x00, 0x00, 0x00,
                0x0F, 0x00, 0x00, 0x00,
                0x05, 0xE0, 0x51, 0x00,
                0x41, 0x60, 0xC8, 0x00,
                0x00, 0x08, 0x28, 0x02,
                0x58, 0x11, 0x83, 0x00,
                0x64, 0x80, 0xF8, 0xCA,
                0x01, 0x07, 0x30, 0x08,
                0x00, 0x00, 0x00, 0x00, // Struct end
                0x3F*/
            };
        }

        public override Packet CreatePacket()
        {
            return base.CreatePacket(Packets.GameSettingsAck);
        }

        public override int ExpectedSize() => 106;

        /*
        00000002 ServerVersion   dd ?
        00000006 Reserve         dd ?
        0000000A m_ContentsFlag  db 96 dup(?)
        */
        public override byte[] GetBytes()
        {
            using (var ms = new MemoryStream())
            {
                using (var bs = new BinaryWriterExt(ms))
                {
                    // Copies 96 bytes starting at offset 8
                    //  qmemcpy(v5, (const void *)(packetData + 10), 0x60u);
                    bs.Write(GameSettings);
                    /*
                    var ack = new Packet(Packets.GameSettingsAck);
                    ack.Writer.Write((int)0);
                    ack.Writer.Write((int)4192);
                    ack.Writer.Write(new byte[82]);
                    ack.Writer.Write((short) 50); // Max Level?
                    ack.Writer.Write(new byte[12]);
                    packet.Sender.Send(ack);
                    */
                }
                return ms.ToArray();
            }
        }
    }
}